<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- #5. appServlet관련 빈 설정 : application안에 servlet이 여러개 존재할 수 있다. -->
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- MVC와 관련된 annotation을 처리한다 -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- /resources/로 시작하는 요청은 servlet이 처리하지 않고, /resources/폴더의 자원을 제공한다. (정적 자원은 직접 가서 찾아와라) -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/WEB-INF/**" location="/WEB-INF/" />
	 <resources mapping="/js/**"  location="/resources/js/" /> 

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- #14.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
    <!-- jsonView가 있으면 jsonView가 먼저 처리된다. 없을 경우 위의 InternalResourceViewResolver를 동작한다. -->
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	
	
	<!-- 회원가입 메일 인증 bean추가 -->
	<beans:bean id="mailSender"	class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" /><!-- 465 or 25 -->
		<beans:property name="username" value="kh.connectcloset@gmail.com" />
		<beans:property name="password" value="connectCloset@@" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	<!-- 회원가입 메일 인증 -->
	
	
	<!-- Spring Container에 bean을 등록하는 역할  : 지정한 패키지를 포함하는 하위의 모든 @Component 어노테이션이 붙은 클래스를 bean으로 생성, 관리한다.-->
	<!-- @Controller, @Service, @Repository가 @Component의 후손이라 인식한다 -->
	<!-- bean의 이름은 소문자로 시작하는 class명이다 -->
	<context:component-scan base-package="com.connectcloset.cc" />
	
	<!-- #15.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter) -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />

	
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- #9. 인터셉터 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<!-- 관리자 빼고 인터셉터 -->
			<exclude-mapping path="/admin/**/"></exclude-mapping>
			<exclude-mapping path="/shop/shopItem/**/"></exclude-mapping>
			<beans:bean id="loggerInterceptor" class="com.connectcloset.cc.common.interceptor.LoggerInterceptor"></beans:bean>


		</interceptor>
		
 		<interceptor>
			<mapping path="/member/memberUpdateForm.do"/>
			<!-- <mapping path="/shop/**/*.do"/> -->
			<mapping path="/shop/cartList.do"/>
			<mapping path="/shop/wishlist.do"/>
			<!-- <mapping path="/shop/cartInsert/**/*.do/"/> -->
			<mapping path="/shop/cartInsert.do"/>
			<mapping path="/shop/wishlistInsert.do"/>
		
			
			
			<mapping path="/blog/blogForm.do"/>
			<mapping path="/mypage/**/*.do"/>
			<!-- <mapping path="/blog/**/*.do"/> -->
			<!-- <exclude-mapping path="board/boardList.do" /> -->
			<exclude-mapping path="/shop/shopItemList/**/*.do"/>
			<beans:bean id="LoginInterceptor" class="com.connectcloset.cc.common.interceptor.LoginInterceptor"></beans:bean>
		</interceptor> 
		
	</interceptors>
	
	<!-- #12.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>
	
	<!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
		<beans:bean id="naverLoginBO" class="com.connectcloset.cc.member.naver.bo.NaverLoginBO" />

	
</beans:beans>
